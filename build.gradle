buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url {"https://dl.bintray.com/rjrudin/maven/"}
        }
    }
    dependencies {
        classpath "com.marklogic:ml-unit-test-client:${mlUnitTestVersion}"
        classpath "com.marklogic:ml-gradle:${mlGradleVersion}"
    }
}

apply plugin: "java"
apply plugin: "com.marklogic.ml-gradle"

repositories {
    jcenter()
    mavenLocal()
    maven {
        url {"https://dl.bintray.com/rjrudin/maven/"}
    }
    maven { url "https://developer.marklogic.com/maven2/" }
}

configurations {
    mlcp
}

dependencies {
    mlRestApi "com.marklogic:ml-unit-test-modules:${mlUnitTestVersion}"

    // For running ml-unit-test tests via JUnit
    testCompile "com.marklogic:ml-unit-test-client:${mlUnitTestVersion}"
    testCompile "junit:junit:4+"

    mlcp "com.marklogic:mlcp:9.0.4"
    /**
     * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
     * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
     * mlcp include a directory or some other resource that provides a log4j.properties file.
     */
    mlcp files("lib")
}

group 'com.marklogic.billFarber'
version '1.0-SNAPSHOT'

task importCompanyA(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    output_collections = "/company/A"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = ".*ml-data,''"

    /**
     * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
     * as a text document. This can also be a variable, Gradle property, etc.
     */
    logOutputUri = "mlcp-log.txt"

    /**
     * The args array can be used for any MLCP parameters that are not supported by the MlcpBean class that MlcpTask
     * delegates to. input_file_path is supported by MlcpTask; this is just included as an example of using the args
     * array.
     */
    args = ["-input_file_path", "src/main/ml-data/CompanyA"]
}

task importCompanyB(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    output_collections = "/company/B"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = ".*ml-data,''"

    /**
     * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
     * as a text document. This can also be a variable, Gradle property, etc.
     */
    logOutputUri = "mlcp-log.txt"

    /**
     * The args array can be used for any MLCP parameters that are not supported by the MlcpBean class that MlcpTask
     * delegates to. input_file_path is supported by MlcpTask; this is just included as an example of using the args
     * array.
     */
    args = ["-input_file_path", "src/main/ml-data/CompanyB"]
}

task importShakespeare(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    database = mlAppConfig.contentDatabaseName
    output_collections = "/shakespeare"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = ".*ml-data,''"

    /**
     * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
     * as a text document. This can also be a variable, Gradle property, etc.
     */
    logOutputUri = "mlcp-log.txt"

    /**
     * The args array can be used for any MLCP parameters that are not supported by the MlcpBean class that MlcpTask
     * delegates to. input_file_path is supported by MlcpTask; this is just included as an example of using the args
     * array.
     */
    args = ["-input_file_path", "src/main/ml-data/shaks200"]
}

task importSampleData(dependsOn: [importCompanyA, importCompanyB, importShakespeare]) {}

import com.marklogic.appdeployer.command.modules.LoadModulesCommand
task setSearchOptionsForRestServer(type: com.marklogic.gradle.task.MarkLogicTask) {
    doLast {
        def cmd = new LoadModulesCommand()
        def context = getCommandContext()
        context.getAppConfig().setRestPort(8137)
        context.getAppConfig().setTestRestPort(null)
        cmd.execute(context)
    }
}






import com.marklogic.appdeployer.command.modules.DeleteTestModulesCommand
import org.gradle.api.tasks.TaskAction

import com.marklogic.appdeployer.AppDeployer
import com.marklogic.appdeployer.command.modules.LoadModulesCommand
import com.marklogic.appdeployer.impl.SimpleAppDeployer
import com.marklogic.gradle.task.MarkLogicTask

class LoadModulesTask extends MarkLogicTask {

    @TaskAction
    void loadModules() {
        LoadModulesCommand command = null
        DeleteTestModulesCommand deleteCommand = null

        // Check for a LoadModulesCommand in the AppDeployer first, as that may have additional configuration that we
        // don't want to have to duplicate on this task
        AppDeployer d = getAppDeployer()
        if (d instanceof SimpleAppDeployer) {
            command = d.getCommand("LoadModulesCommand")
            deleteCommand = d.getCommand("DeleteTestModulesCommand")
        }

        if (command == null) {
            command = new LoadModulesCommand()
        }
        if (deleteCommand == null) {
            deleteCommand = new DeleteTestModulesCommand()
        }

        command.execute(getCommandContext())
        deleteCommand.execute(getCommandContext())
    }
}


mlPostDeploy.dependsOn(mlSetTraceEvents)
